name: Commitlint

on: 
  push:
    branches: [main, 'feature/**', 'fix/**', 'chore/**']
  pull_request:
    branches: [main]

jobs:
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for commitlint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install commitlint
        run: |
          npm install --save-dev @commitlint/config-conventional @commitlint/cli

      - name: Validate current commit (for push)
        if: github.event_name == 'push'
        run: echo "${{ github.event.head_commit.message }}" | npx commitlint

      - name: Validate PR commits (for pull_request)
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Comment on PR with commit guidelines (on failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            const comment = `## ‚ùå Commit Message Validation Failed
            
Your commit messages don't follow our conventional commit standards. Please update your commit messages to follow this format:

\`\`\`
<type>[optional scope]: <description>
\`\`\`

### Valid Types:
- **feat**: A new feature (triggers minor version)
- **fix**: A bug fix (triggers patch version)  
- **docs**: Documentation only changes (no version)
- **style**: Code style changes (no version)
- **refactor**: Code refactoring (triggers patch version)
- **perf**: Performance improvements (triggers patch version)
- **test**: Adding or updating tests (no version)
- **chore**: Maintenance tasks (no version)
- **ci**: CI/CD changes (no version)
- **build**: Build system changes (no version)

### Examples:
\`\`\`bash
feat: add customer data pipeline
fix: resolve data validation error
docs: update API documentation
feat!: change data schema format  # Breaking change
\`\`\`

### To Fix:
1. Rewrite your commit messages using \`git rebase -i\`
2. Or squash your commits into a single commit with proper format
3. Force push your updated branch

üìñ **Full Guide**: [devops/semantic-versioning-guide.md](https://github.com/${owner}/${repo}/blob/main/devops/semantic-versioning-guide.md)

This check must pass before your PR can be merged.`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Commit Message Validation Failed')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
            }