name: Databricks CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod


jobs:
  validate:
    name: Validate Databricks Bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "/home/runner/.databricks/bin" >> $GITHUB_PATH

      - name: Validate bundle configuration
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle validate --target dev


  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'pull_request' && 
       (startsWith(github.head_ref, 'feature/') || 
        startsWith(github.head_ref, 'fix/') || 
        startsWith(github.head_ref, 'chore/'))) ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'dev')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "/home/runner/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy to Dev Environment
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle deploy --target dev \
            --var git_branch="$GITHUB_REF_NAME" \
            --var git_commit="$GITHUB_SHA" \
            --var git_origin_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"

      - name: Run Dev Tests
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle run --target dev validation_job || true

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'test')
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "/home/runner/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy to Test Environment
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_TEST_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TEST_TOKEN }}
        run: |
          databricks bundle deploy --target test \
            --var git_branch="$GITHUB_REF_NAME" \
            --var git_commit="$GITHUB_SHA" \
            --var git_origin_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"

      - name: Run Test Suite
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_TEST_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TEST_TOKEN }}
        run: |
          databricks bundle run --target test test_job || true

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-test
    if: |
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'prod')
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "/home/runner/.databricks/bin" >> $GITHUB_PATH

      - name: Extract Version Info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "git_tag=$VERSION" >> $GITHUB_OUTPUT
            echo "commit_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          else
            echo "version=manual-deploy" >> $GITHUB_OUTPUT
            echo "git_tag=manual" >> $GITHUB_OUTPUT
            echo "commit_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Production Environment
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
          DEPLOYMENT_VERSION: ${{ steps.version.outputs.version }}
          GIT_TAG: ${{ steps.version.outputs.git_tag }}
          COMMIT_SHA: ${{ steps.version.outputs.commit_sha }}
        run: |
          echo "ðŸš€ Deploying to Production"
          echo "Version: $DEPLOYMENT_VERSION"
          echo "Git Tag: $GIT_TAG" 
          echo "Commit: $COMMIT_SHA"
          databricks bundle deploy --target prod \
            --var git_branch="$GITHUB_REF_NAME" \
            --var git_commit="$COMMIT_SHA" \
            --var git_origin_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
            --var deployment_version="$DEPLOYMENT_VERSION"

      - name: Run Production Smoke Tests
        working-directory: src
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          databricks bundle run --target prod smoke_test_job || true